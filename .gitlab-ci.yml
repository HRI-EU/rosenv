---
.poetry_install:
    before_script:
        - export PATH="$PATH:$HOME/.local/bin"
        - pip install --upgrade poetry==1.6.1

default:
    image: dmz-gitlab.honda-ri.de:5050/gitlabrunner/buildcontainers/risk-model:latest
    before_script:
        - !reference [ .poetry_install, before_script ]
        - poetry source add --priority=default pypi-proxy https://cicd-pkg-reg.honda-ri.de/repository/pypi-proxy/simple
        - poetry config repositories.hri-gitlab "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi"
        - poetry install --all-extras
    interruptible: true
    cache:
        paths:
            - .venv

    tags:
        - rootless

variables:
    REQUESTS_CA_BUNDLE: /usr/local/share/ca-certificates/HRI-CA_cert.crt
    POETRY_HTTP_BASIC_HRI_GITLAB_USERNAME: gitlab-ci-token
    POETRY_HTTP_BASIC_HRI_GITLAB_PASSWORD: "$CI_JOB_TOKEN"
    PIP_INDEX_URL: https://cicd-pkg-reg.honda-ri.de/repository/pypi-proxy/simple
    POETRY_VIRTUALENVS_IN_PROJECT: "true"

stages:
    - check
    - build
    - release

hri quality check:
    stage: check
    image: dmz-gitlab.honda-ri.de:5050/gitlabrunner/buildcontainers/hri-eu-main
    before_script: []
    script:
        - ./ci-bst-check.sh

poetry lockfile check:
    stage: check
    before_script: !reference [ .poetry_install, before_script ]
    script:
        - poetry lock --check

formatting:
    stage: check
    script:
        - ./ci-format.sh --check

typing:
    stage: check
    script:
        - ./ci-typing.sh

linting:
    stage: check
    script:
        - ./ci-lint.sh --format gitlab | tee codequality.report
        - ./ci-lint.sh --format pylint | tee lint.report
    artifacts:
        reports:
            codequality:
                - codequality.report
        paths:
            - lint.report
        expire_in: 1 day

unit tests:
    stage: check
    script:
        - ./ci-unit-test.sh --coverage --junit xunit-reports/xunit-result-pytest.xml
    coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
    artifacts:
        reports:
            junit:
                - xunit-reports/xunit-result-pytest.xml
            coverage_report:
                coverage_format: cobertura
                path: coverage.xml
        paths:
            - coverage.xml
            - xunit-reports/xunit-result-pytest.xml
        expire_in: 1 day

integration tests:
    stage: check
    image: $IMAGE
    script:
        - ./ci-integration-test.sh --junit xunit-reports/xunit-result-integration-ros${ROS_VERSION}.xml
    artifacts:
        reports:
            junit:
                - xunit-reports/xunit-result-integration-ros${ROS_VERSION}.xml
        paths:
            - xunit-reports/xunit-result-integration-ros${ROS_VERSION}.xml
        expire_in: 1 hour
    parallel:
        matrix:
            - IMAGE: dmz-gitlab.honda-ri.de:5050/sse/ci/rosenv:latest
              ROS_VERSION: 1

build:
    stage: build
    script:
        - poetry build
    artifacts:
        paths:
            - dist
        expire_in: "1 days"

upload:
    stage: release
    rules:
        - if: $CI_COMMIT_TAG
    needs:
        - build
    script:
        - poetry publish --repository hri-gitlab
        - echo "ARTIFACT_NAME=rosenv-$(poetry version --short)-py3-none-any.whl" >> variables.env
        - echo "ARTIFACT_URL=https://dmz-gitlab.honda-ri.de/SSE/rosenv/-/packages/?search%5B%5D=rosenv" >> variables.env
    artifacts:
        reports:
            dotenv: variables.env
        expire_in: 1 day

release:
    stage: release
    image: dmz-gitlab.honda-ri.de:5050/gitlabrunner/buildcontainers/hri-eu-main
    rules:
        - if: $CI_COMMIT_TAG
    needs:
        - upload
    before_script: []
    script:
        - release-cli --insecure-https create --description "Release $CI_COMMIT_TAG" --tag-name "$CI_COMMIT_TAG"
          --assets-link "{\"url\":\"${ARTIFACT_URL}\",\"name\":\"${ARTIFACT_NAME}\"}"

sonarqube:
    stage: check
    needs:
        - linting
        - unit tests
    variables:
        SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
        GIT_DEPTH: "0"
        SIT: "/hri/sit/latest"
        GIT_STRATEGY: "clone"
    before_script: []
    script:
        - source /hri/sit/latest/External/SonarScanner/4.6/BashSrc
        - sonar-scanner
    cache:
        key: "${CI_JOB_NAME}"
        paths:
            - .sonar/cache
    allow_failure: true
